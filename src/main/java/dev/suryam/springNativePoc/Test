<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.lbg.ob.gtpp.Foo</groupId>
	<artifactId>Foo-enterprise</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Foo-enterprise</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2023.0.1</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-testcontainers</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>



package com.lbg.ob.gtpp.connections.connectionsenterprise;

import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.*;

@RestController
@RequestMapping("/foo")
@Api(tags = "Foo Controller", description = "Operations pertaining to Foo")
public class FooController {

    @ApiOperation(value = "Get a specific Foo by ID")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successfully retrieved Foo"),
            @ApiResponse(code = 404, message = "The Foo with given ID does not exist")
    })
    @GetMapping("/{id}")
    public Foo getFoo(@PathVariable Long id) {
        // Implement logic to retrieve Foo by ID
        return fooService.getFooById(id);
    }

    @ApiOperation(value = "Create a new Foo")
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Foo created successfully"),
            @ApiResponse(code = 400, message = "Invalid request body")
    })
    @PostMapping("/")
    public ResponseEntity<Void> createFoo(@RequestBody Foo foo) {
        // Implement logic to create Foo
        fooService.createFoo(foo);
        return ResponseEntity.status(HttpStatus.CREATED).build();
    }

    @ApiOperation(value = "Update an existing Foo")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Foo updated successfully"),
            @ApiResponse(code = 400, message = "Invalid request body"),
            @ApiResponse(code = 404, message = "The Foo with given ID does not exist")
    })
    @PatchMapping("/{id}")
    public ResponseEntity<Void> updateFoo(@PathVariable Long id, @RequestBody Foo foo) {
        // Implement logic to update Foo
        fooService.updateFoo(id, foo);
        return ResponseEntity.ok().build();
    }
}
package com.lbg.ob.gtpp.connections.connectionsenterprise;

import com.google.cloud.spanner.emulator.v1.Emulator;
import io.cucumber.java.Before;
import io.cucumber.java.en.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.*;

public class FooSteps {

    @Autowired
    private TestRestTemplate restTemplate;

    private ResponseEntity<String> response;

    @Before
    public void setUp() {
        // Start Spanner emulator
        Emulator.start();
        // Set environment variables for your application to connect to the Spanner emulator
        System.setProperty("spring.cloud.gcp.spanner.instance-id", "test-instance");
        System.setProperty("spring.cloud.gcp.spanner.database", "test-database");
        System.setProperty("spring.cloud.gcp.spanner.emulator-host", "localhost:9010"); // Default Spanner emulator host
    }

    @Given("I have a new Foo object")
    public void i_have_a_new_foo_object() {
        // You can set up the Foo object here if needed
    }

    @When("I send a POST request to /foo/")
    public void i_send_a_post_request_to_foo() {
        String fooJson = "{\"attr1\": \"value1\"}"; // Adjust according to your Foo attributes

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        HttpEntity<String> requestEntity = new HttpEntity<>(fooJson, headers);

        response = restTemplate.postForEntity("/foo/", requestEntity, String.class);
    }

    @Then("the response status code should be {int}")
    public void the_response_status_code_should_be(Integer expectedStatusCode) {
        HttpStatus statusCode = response.getStatusCode();
        assert statusCode != null;
        assert statusCode.value() == expectedStatusCode;
    }

    @After
    public void tearDown() {
        // Stop Spanner emulator
        Emulator.stop();
    }
}
